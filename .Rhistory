devtools::check()
usethis::use_mit_license("Qiaolan Deng")
devtools::check()
usethis::use_r("MTAFS")
load("~/PAS1149/package_MTAF/MTAFS/data/simulation.RData")
estR <- cor(simulation)
?eigen
eig <- eigen(estR)
U <- eig$vectors
lambda <- eig$values
cumsum(lambda/sum(lambda))
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# get variance explained by eigenvalues
percentExp <- cumsum(lambda/sum(lambda))
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
seq(minExp,1,length.out = 5)
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
d <- vector()
percent.use <- vector()
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percent.use <- c(percent.use,per)
d <- c(d,max(which(tmp)))
}
}
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
d <- vector()
percent.use <- vector()
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percent.use <- c(percent.use,per)
d <- c(d,max(which(tmp)))
}
}
d
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
nEigen <- vector()
per=v[1]
percentExp <= per
tmp <- percentExp <= per
any(tmp)
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
nEigen <- vector()
percentQ <- vector() # percentage actually explained by q's
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percentQ <- c(percentQ,per)
nEigen <- c(nEigen,max(which(tmp)))
}
}
load("~/PAS1149/package_MTAF/MTAFS/data/simulation.RData")
estR <- cor(simulation)
eigenDecomp <- function(estR){
# conduct eigen-decomposition
eig <- eigen(estR)
# obtain U and lambda
U <- eig$vectors
lambda <- eig$values
# get variance explained by eigenvalues
percentExp <- cumsum(lambda/sum(lambda))
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
nEigen <- vector()
percentQ <- vector() # percentage actually explained by q's
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percentQ <- c(percentQ,per)
nEigen <- c(nEigen,max(which(tmp)))
}
}
return(list(q=nEigen, v=percentQ, eigenD=eig))
}
test <- eigenDecomp(estR = estR)
test$q
test$v
usethis::use_r("eigenDecomp")
str(test)
devtools::check()
usethis::use_data(simulation, MTAFS)
?usethis::use_data
devtools::check()
devtools::check()
data(simulation)
Rhat <- cov(simulation)
eigR <- eigenDecomp(estR = Rhat)
str(eigR)
devtools::load_all()
data(simulation)
Rhat <- cov(simulation)
eigR <- eigenDecomp(estR = Rhat)
str(eigR)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
?eigendecomp
??eigenDecomp
?eigenDecomp
devtools::check()
devtools::document()
devtools::check()
usethis::use_package_doc()
usethis::use_roxygen_md()
usethis::use_roxygen_md()
devtools::document()
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
usethis::use_r("cct")
devtools::document()
devtools::load_all(".")
devtools::check()
devtools::document()
devtools::document()
source(file.path(Sys.getenv("LMOD_PKG"), "init/R"))
module("load", "gsl")
dyn.load("/usr/lib64/atlas/libsatlas.so.3")
library(RcppZiggurat)
devtools::check()
devtools::check()
usethis::use_r("af")
devtools::load_all(".")
devtools::document()
devtools::check()
devtools::load_all(".")
devtools::document()
devtools::check()
usethis::use_r("MTAFS")
Z <- simulation
d <- eigR$q
U <- eigR$eigenD$vectors
n.pcs <- ncol(U)
n.snps <- nrow(Z)
d <- eigR$q
results <- matrix(NA,nrow = n.snps, ncol = length(d)+1)
U <- eigR$eigenD$vectors
lambda <- eigR$eigenD$values
# For each level E in {2,q1,q2,q3,T}
j=1
for (i in d) {
lambda_inv <- diag(1/sqrt(lambda[1:i]))
z_pcs <- Z %*% U[,1:i] %*% lambda_inv
assign(paste0("p_mtaf_cauchy",j), af(z_pcs, weights = NULL)) # get p_{AF(E)}
results[,j] <- get(paste0("p_mtaf_cauchy",j))
j=j+1
}
View(results)
results2 <- matrix(NA,nrow = n.snps, ncol = length(d)+1)
af(z_pcs, weights = NULL)
tmp <- af(z_pcs, weights = NULL)
tmp2 <- as.vector(tmp)
results2 <- matrix(NA,nrow = n.snps, ncol = length(d)+1)
results2[,j] <- af(z_pcs, weights = NULL) # get p_{AF(E)}
View(results2)
View(results)
results <- matrix(NA,nrow = n.snps, ncol = length(d)+1)
# For each level E in {2,q1,q2,q3,T}
d <- eigR$q
j=1
for (i in d) {
lambda_inv <- diag(1/sqrt(lambda[1:i]))
z_pcs <- Z %*% U[,1:i] %*% lambda_inv
results[,j] <- af(z_pcs, weights = NULL) # get p_{AF(E)}
j=j+1
}
View(results)
# MTAFS
results[,j] <- cct(results[,1:(j-1)])
colnames(results) <- c(paste0(as.character(round(eigR$v,2)*100),"%"),"MTAFS")
View(results)
colnames(results) <- c(paste0(as.character(eigR$q),"(",as.character(round(eigR$v,2)*100),"%",")"),"MTAFS")
View(results)
devtools::document()
data("simulation")
Z <- data("simulation")
Rhat <- cov(Z)
data("simulation")
Z <- simulation
Rhat <- cov(Z)
eigR <- eigenDecomp(estR = Rhat)
p_MTAFS <- MTAFS(Z,eigR)
View(p_MTAFS)
head(p_MTAFS)
devtools::load_all(".")
devtools::document()
devtools::check()
devtools::check()
devtools::load_all(".")
devtools::use_vignette()
devtools::use_vignette()
usethis::use_vignette()
usethis::use_vignette("MTAFS")
#remotes::install_github("Qiaolan/MTAFS")
library(MTAFS)
data("simulation")
head(simulation)
devtools::load_all(".")
library(MTAFS)
data("simulation")
setwd("~/rPackage/MTAFS")
data("simulation")
dim(simulation)
Z <- simulation
Rhat <- cov(Z)
eigR <- eigenDecomp(Rhat)
str(eigR)
eigR <- eigenDecomp(Rhat)
str(eigR)
pMTAFS <- MTAFS(Z, eigR)
time=proc.time()
pMTAFS <- MTAFS(Z, eigR)
proc.time()-time
head(pMTAFS)
devtools::document()
devtools::load_all(".")
devtools::check()
devtools::build()
vignette(MTAFS)
vignette("MTAFS")
browseVignettes("MTAFS")
browseVignettes(MTAFS)
browseVignettes("MTAFS")
devtools::build_vignettes()
devtools::build_vignettes()
remove.packages("MTAFS")
remove.packages(MTAFS)
remove.packages("MTAFS")
load("~/rPackage/MTAFS/data/simulation.rda")
Z <- simulation
Rhat <- cov(Z)
estR <- Rhat
# conduct eigen-decomposition
eig <- eigen(estR)
# obtain U and lambda
U <- eig$vectors
lambda <- eig$values
# obtain U and lambda
U <- eig$vectors
lambda <- eig$values
# get variance explained by eigenvalues
percentExp <- cumsum(lambda/sum(lambda))
percentExp
varExp <- c(0.1,0.5,0.9)
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
v
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
v
percentExp
?stop
# get variance explained by eigenvalues
percentExp <- cumsum(lambda/sum(lambda))
stop(paste0("The minimum percentage of variance explained is ", min(percentExp)))
stop(paste0("The minimum percentage of variance explained is ", round(min(percentExp),2)))
v <- varExp
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
v <- varExp
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
nEigen <- vector()
percentQ <- vector() # percentage actually explained by q's
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percentQ <- c(percentQ,per)
nEigen <- c(nEigen,max(which(tmp)))
}
}
percentQ
nEigen
if (min(percentExp) > min(varExp)) {
stop(paste0("The minimum percentage of variance explained is ", round(min(percentExp),2)))
}
# conduct eigen-decomposition
eig <- eigen(estR)
# obtain U and lambda
U <- eig$vectors
lambda <- eig$values
# get variance explained by eigenvalues
percentExp <- cumsum(lambda/sum(lambda))
varExp <- c(0.3,0.6,0.9)
if (!is.null(varExp)) {
if (min(percentExp) > min(varExp)) {
stop(paste0("The minimum percentage of variance explained is ", round(min(percentExp),2)))
}
v <- varExp
} else {
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
}
v
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
nEigen <- vector()
percentQ <- vector() # percentage actually explained by q's
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percentQ <- c(percentQ,per)
nEigen <- c(nEigen,max(which(tmp)))
}
}
nEigen
percentQ
sort(c(0.9,0.2,0.5))
eigenDecomp <- function(estR, varExp=NULL){
# conduct eigen-decomposition
eig <- eigen(estR)
# obtain U and lambda
U <- eig$vectors
lambda <- eig$values
# get variance explained by eigenvalues
percentExp <- cumsum(lambda/sum(lambda))
if (!is.null(varExp)) {
varExp <- sort(varExp)
if (min(percentExp) > min(varExp)) {
stop(paste0("The minimum percentage of variance explained is ", round(min(percentExp),2)))
}
v <- varExp
} else {
# percentage explained by the first two eigenvalues
minExp <- percentExp[2]
# set v1, v2, and v3
v <- seq(minExp,1,length.out = 5)
}
# find the number of eigenvector corresponding to variance explained: q1, q2, q3
nEigen <- vector()
percentQ <- vector() # percentage actually explained by q's
for (per in v) {
tmp <- percentExp <= per
if (any(tmp)) {
percentQ <- c(percentQ,per)
nEigen <- c(nEigen,max(which(tmp)))
}
}
return(list(q=nEigen, v=percentQ, eigenD=eig))
}
R_eigen = eigenDecomp(estR)
U <- R_eigen$vectors
n.pcs <- ncol(U)
n.snps <- nrow(Z)
U <- R_eigen$vectors
devtools::load_all(".")
source(file.path(Sys.getenv("LMOD_PKG"), "init/R"))
module("load", "gsl")
dyn.load("/usr/lib64/atlas/libsatlas.so.3")
library(RcppZiggurat)
devtools::load_all(".")
data("simulation")
head(simulation[,1:5])
data("simulation")
dim(simulation)
Z <- simulation
Rhat <- cov(Z)
colnames(Rhat) <- c("1",rep("",99),"100",rep("",99),"200",rep("",10),"212")
rownames(Rhat) <-  c("1",rep("",99),"100",rep("",99),"200",rep("",10),"212")
corrplot::corrplot(cov2cor(Rhat), method = "color", tl.pos='lt',tl.cex = 0.8, tl.col = "black", mar = c(1,1,1,1), title = "")
eigR <- eigenDecomp(Rhat)
str(eigR)
?eigenDecomp
eigR_user <- eigenDecomp(Rhat, varExp = c(0.2,0.4,0.8))
str(eigR_user)
eigR_user <- eigenDecomp(Rhat, varExp = c(0.4,0.6,0.8))
str(eigR_user)
time=proc.time()
pMTAFS <- MTAFS(Z, eigR)
proc.time()-time
time=proc.time()
pMTAFS_user <- MTAFS(Z, eigR_user)
proc.time()-time
pMTAFS_user <- MTAFS(Z, eigR_user)
head(pMTAFS_user)
head(pMTAFS)
devtools::check()
devtools::check()
devtools::check()
setwd("~/Chunglab")
sessionInfo()
setwd("~/rPackage/MTAFS")
remove.packages("GGPA2")
devtools::load_all(".")
sessionInfo()
source(file.path(Sys.getenv("LMOD_PKG"), "init/R"))
module("load", "gsl")
dyn.load("/usr/lib64/atlas/libsatlas.so.3")
library(RcppZiggurat)
devtools::check()
source(file.path(Sys.getenv("LMOD_PKG"), "init/R"))
module("load", "gsl")
dyn.load("/usr/lib64/atlas/libsatlas.so.3")
library(RcppZiggurat)
devtools::check()
setwd("~/PAS1149")
setwd("~/rPackage/MTAFS")
source(file.path(Sys.getenv("LMOD_PKG"), "init/R"))
module("load", "gsl")
dyn.load("/usr/lib64/atlas/libsatlas.so.3")
library(RcppZiggurat)
devtools::check()
